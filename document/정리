전반적인 고민
- 오버 엔지니어링: 현재 요구사항에 필요하지도 않은 기능을 추가한다거나, 미래 앞서서 설계에 너무 힘을 쏟는다는거나.., 개발 생산성

설계 고민
1. 프론트엔드와 백엔드 영역을 분리해서 작업
    why?
    - 개발되어야하는 애플리케이션의 특징은 상대적으로 UI 변화가 빈번히 일어난다.
    - 브라우저 애플리케이션을 server-side 렌더링 방식으로 서비스하면, 서버 단에서 렌더링 작업으로 부담될 수 있다.
    - 그렇기 때문에, client-side 렌더링 방식으로 하기로 결정
    - 백엔드 영역의 서버는 단지 브라우저 애플리케이션을 사용자가 처음 접속할 때, 던져주고 원격으로 필요한 서비스만 제공하는 API 서버 역할
    - 프론트 영역은 사용자랑 직접 상호작용하면서 동작하면서, 브라우저 애플리케이션이 자체적으로 랜더링하도록 코드 작성
2. 브라우저 애플리케이션의 서비스 컴포넌트는 왜 이벤트 기반으로 통신하는가
    why?
    - 코드를 작성하다보니, 컴포넌트들끼리 의존성이 커지는 느낌이 받음(컴포)



3. State의 매니저가 필요한 이유
-  브라우저 애플리케이션의 상태에 저장되는 정보가 많아지면, State 클래스가 비대해지고 책임이 커지는 경우가 있다.
- 그렇기 때문에 State의 관리를 상태 매니저에게 위임하는 식으로 관리하면, 확장성있게 코드를 작성할 수 있다.


고려한점
- render -> board.renderer 인터페이스 설계(renderer의 공통적인 성질은 인터페이스로ㄷ)


코드 작성 고민
- 저는 이번 프로젝트를 기점으로 떠나고 이 프로젝틀 인수인계해야한다고 작업(네이밍 고민, 주석화)
- 작명에 관해서 
- event.js 명세한 이유: 따로 규격에 대한 명세 클래스가 없으니, 코드 작성할 때 헷갈림
- "_functionName": private
- "__functionName": protected


수정사항
- state 서비스 컴포넌트의 역할(원래는 각 매니저들 생성하고, 상태 영역 분할하는 것뿐, 이벤트를 알리는 역할까지 추)


--------

서버측에서 신경써야하는 것
(최소한 보안)
- 악의적인 유저가 항상있다고 생각하기
- 실수를 하는 유저가 있다고 생각(서버는 꺼졌지만, 핑은 보낸다, 그리고 다시 서버가 켜진다.. 그러면)

1. 브라우저 애플리케이션에서 보내는 요청이 아닌 경우 제외 (csf걸고)
2. 값 유효성 검증하고
3. 에러 발생시 핸드러 처리